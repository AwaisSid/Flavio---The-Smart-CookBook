<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Recipe Recommendations</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .recipe-card {
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }
        .recipe-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        .difficulty-badge {
            font-size: 0.75rem;
            letter-spacing: 0.05em;
        }
        .difficulty-easy {
            background-color: #ECFDF5;
            color: #065F46;
        }
        .difficulty-medium {
            background-color: #FFFBEB;
            color: #92400E;
        }
        .difficulty-hard {
            background-color: #FEE2E2;
            color: #991B1B;
        }
        .nutrition-badge {
            font-size: 0.7rem;
            padding: 0.25rem 0.5rem;
        }
        .filter-dropdown {
            transition: all 0.2s ease;
        }
        .filter-dropdown:hover {
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
        }
        .empty-state-icon {
            font-size: 3rem;
            opacity: 0.2;
        }
    </style>
</head>
<body class="bg-gray-50 font-sans">
    <%- include('partials/header') %>

    <main class="container mx-auto px-4 py-8">
        <!-- Header Section -->
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
            <div class="mb-4 md:mb-0">
                <h1 class="text-3xl font-bold text-gray-900">Your Personalized Recommendations</h1>
                <p class="text-gray-600 mt-1">Recipes tailored just for you</p>
            </div>
            <div class="flex flex-col sm:flex-row gap-3 w-full md:w-auto">
                <button id="refreshRecs" class="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all flex items-center justify-center">
                    <i class="fas fa-sync-alt mr-2"></i> Refresh
                </button>
                <a href="/recipes/discover" class="px-4 py-2 border border-blue-500 text-blue-600 rounded-lg hover:bg-blue-50 transition flex items-center justify-center">
                    <i class="fas fa-compass mr-2"></i> Explore More
                </a>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="bg-white p-5 rounded-xl shadow-sm mb-8">
            <div class="flex flex-col md:flex-row md:items-center justify-between mb-4">
                <h2 class="text-lg font-semibold text-gray-800">Refine Your Recommendations</h2>
                <button id="resetFilters" class="text-sm text-blue-600 hover:text-blue-800 mt-2 md:mt-0">
                    <i class="fas fa-undo mr-1"></i> Reset filters
                </button>
            </div>
            
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                <!-- Cuisine Filter -->
                <div class="relative">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Cuisine</label>
                    <div class="relative">
                        <select id="cuisineFilter" class="filter-dropdown w-full pl-3 pr-10 py-2 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 appearance-none">
                            <option value="">All Cuisines</option>
                            <option>Chinese</option>
                            <option>Indian</option>
                            <option>Italian</option>
                            <option>Mughlai</option>
                        </select>
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="fas fa-chevron-down text-gray-400"></i>
                        </div>
                    </div>
                </div>

                <!-- Meal Type Filter -->
                <div class="relative">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Meal Type</label>
                    <div class="relative">
                        <select id="mealTypeFilter" class="filter-dropdown w-full pl-3 pr-10 py-2 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 appearance-none">
                            <option value="">All Types</option>
                            <option>Breakfast</option>
                            <option>Lunch</option>
                            <option>Dinner</option>
                            <option>Dessert</option>
                        </select>
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="fas fa-chevron-down text-gray-400"></i>
                        </div>
                    </div>
                </div>

                <!-- Difficulty Filter -->
                <div class="relative">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Difficulty</label>
                    <div class="relative">
                        <select id="difficultyFilter" class="filter-dropdown w-full pl-3 pr-10 py-2 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 appearance-none">
                            <option value="">Any Difficulty</option>
                            <option>Easy</option>
                            <option>Medium</option>
                            <option>Hard</option>
                        </select>
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="fas fa-chevron-down text-gray-400"></i>
                        </div>
                    </div>
                </div>

                <!-- Calories Filter -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Max Calories</label>
                    <div class="relative">
                        <input type="number" id="caloriesFilter" placeholder="No limit" 
                            class="filter-dropdown w-full pl-3 pr-10 py-2 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="fas fa-fire text-gray-400"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recommendations Grid -->
        <div id="recommendationsContainer" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            <% if (recommendations.length > 0) { %>
                <% recommendations.forEach(recipe => { %>
                    <div class="recipe-card bg-white rounded-xl overflow-hidden border border-gray-100">
                        <!-- Recipe Image -->
                        <div class="relative h-48 overflow-hidden">
                            <a href="/recipes/<%= recipe.recipe_id %>" class="block h-full">
                                <img src="/images/<%= recipe.image_url || '/images/default-recipe.jpg' %>" 
                                     alt="<%= recipe.name %>" 
                                     class="w-full h-full object-cover transition duration-500 hover:scale-105">
                                <div class="absolute top-3 right-3">
                                    <span class="difficulty-badge px-2 py-1 rounded-full font-medium <%= 
                                        recipe.difficulty === 'easy' ? 'difficulty-easy' : 
                                        recipe.difficulty === 'medium' ? 'difficulty-medium' : 'difficulty-hard' %>">
                                        <%= recipe.difficulty.charAt(0).toUpperCase() + recipe.difficulty.slice(1) %>
                                    </span>
                                </div>
                                <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4">
                                    <h3 class="text-white font-semibold text-lg"><%= recipe.name %></h3>
                                </div>
                            </a>
                        </div>

                        <!-- Recipe Details -->
                        <div class="p-5">
                            <!-- Meta Info -->
                            <div class="flex items-center text-gray-600 text-sm mb-4">
                                <span class="flex items-center mr-4">
                                    <i class="far fa-clock mr-1"></i>
                                    <%= recipe.time || '30 mins' %>
                                </span>
                                <span class="flex items-center">
                                    <i class="fas fa-utensils mr-1"></i>
                                    <%= recipe.cuisine %>
                                </span>
                            </div>

                            <!-- Nutrition Info -->
                            <div class="flex flex-wrap gap-2 mb-4">
                                <span class="nutrition-badge bg-blue-100 text-blue-800 rounded-full flex items-center">
                                    <i class="fas fa-fire mr-1"></i> <%= recipe.calories %> cal
                                </span>
                                <span class="nutrition-badge bg-green-100 text-green-800 rounded-full flex items-center">
                                    <i class="fas fa-dumbbell mr-1"></i> <%= recipe.protein %>g
                                </span>
                                <span class="nutrition-badge bg-yellow-100 text-yellow-800 rounded-full flex items-center">
                                    <i class="fas fa-bread-slice mr-1"></i> <%= recipe.carbs %>g
                                </span>
                                <span class="nutrition-badge bg-red-100 text-red-800 rounded-full flex items-center">
                                    <i class="fas fa-bacon mr-1"></i> <%= recipe.fat %>g
                                </span>
                            </div>

                            <!-- Action Buttons -->
                            <div class="flex space-x-3">
                                <a href="/recipes/<%= recipe.recipe_id %>" 
                                   class="flex-1 text-center py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition flex items-center justify-center">
                                    <i class="far fa-eye mr-2"></i> View
                                </a>
                                <button class="save-recipe-btn w-12 h-10 flex items-center justify-center border border-blue-500 text-blue-600 rounded-lg hover:bg-blue-50 transition"
                                        data-recipe-id="<%= recipe.recipe_id %>">
                                    <i class="far fa-heart"></i>
                                </button>
                                <button class="add-to-meal-plan w-12 h-10 flex items-center justify-center border border-blue-500 text-blue-600 rounded-lg hover:bg-blue-50 transition"
                                        data-recipe-id="<%= recipe.recipe_id %>">
                                    <i class="far fa-calendar-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <!-- Empty State -->
                <div class="col-span-full text-center py-16">
                    <div class="mx-auto w-24 h-24 text-gray-300 mb-4 empty-state-icon">
                        <i class="fas fa-utensils"></i>
                    </div>
                    <h3 class="text-xl font-medium text-gray-900">No recommendations found</h3>
                    <p class="mt-2 text-gray-600 max-w-md mx-auto">We couldn't find any recipes matching your current filters. Try adjusting your preferences or refresh the recommendations.</p>
                    <div class="mt-6 flex flex-col sm:flex-row justify-center gap-3">
                        <button id="resetFilters" class="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition">
                            <i class="fas fa-undo mr-2"></i> Reset Filters
                        </button>
                        <a href="/users/preferences" class="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition">
                            <i class="fas fa-sliders-h mr-2"></i> Update Preferences
                        </a>
                    </div>
                </div>
            <% } %>
        </div>
    </main>

    <%- include('partials/footer') %>

    <script>
        // Track recipe views
        document.querySelectorAll('a[href^="/recipes/"]').forEach(link => {
            link.addEventListener('click', function(e) {
                const recipeId = this.getAttribute('href').split('/')[2];
                fetch(`/recipes/${recipeId}/track-view`, { 
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).catch(err => console.error('Error tracking view:', err));
            });
        });

        // Save recipe functionality
        document.querySelectorAll('.save-recipe-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                const recipeId = this.getAttribute('data-recipe-id');
                const icon = this.querySelector('i');
                
                fetch(`/recipes/${recipeId}/save`, { 
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        icon.classList.remove('far');
                        icon.classList.add('fas', 'text-red-500');
                        this.classList.remove('border-blue-500', 'text-blue-600');
                        this.classList.add('border-red-200', 'bg-red-50');
                    }
                })
                .catch(err => console.error('Error saving recipe:', err));
            });
        });

        // Add to meal plan functionality
        document.querySelectorAll('.add-to-meal-plan').forEach(btn => {
            btn.addEventListener('click', function() {
                const recipeId = this.getAttribute('data-recipe-id');
                const icon = this.querySelector('i');
                
                // Visual feedback
                icon.classList.remove('fa-calendar-plus');
                icon.classList.add('fa-check');
                this.classList.remove('border-blue-500', 'text-blue-600');
                this.classList.add('border-green-500', 'text-green-600', 'bg-green-50');
                
                // In a real app, you would implement a modal or API call here
                console.log('Add recipe to meal plan:', recipeId);
                
                // Reset icon after 2 seconds
                setTimeout(() => {
                    icon.classList.remove('fa-check');
                    icon.classList.add('fa-calendar-plus');
                    this.classList.remove('border-green-500', 'text-green-600', 'bg-green-50');
                    this.classList.add('border-blue-500', 'text-blue-600');
                }, 2000);
            });
        });

        // Filter functionality
        const filters = {
            cuisine: document.getElementById('cuisineFilter'),
            mealType: document.getElementById('mealTypeFilter'),
            difficulty: document.getElementById('difficultyFilter'),
            calories: document.getElementById('caloriesFilter')
        };

        // Apply filters when changed
        Object.values(filters).forEach(filter => {
            filter.addEventListener('change', applyFilters);
        });

        // Reset filters button
        document.getElementById('resetFilters').addEventListener('click', resetFilters);

        function applyFilters() {
            const filterData = {
                cuisine: filters.cuisine.value,
                mealType: filters.mealType.value,
                difficulty: filters.difficulty.value,
                maxCalories: filters.calories.value
            };

            fetch('/recipes/recommendations/filter', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(filterData)
            })
            .then(response => response.json())
            .then(data => {
                // In a real app, you would update the DOM with new filtered recipes
                console.log('Filtered recipes:', data);
                // For now, we'll just reload the page with query params
                const params = new URLSearchParams();
                if (filterData.cuisine) params.set('cuisine', filterData.cuisine);
                if (filterData.mealType) params.set('mealType', filterData.mealType);
                if (filterData.difficulty) params.set('difficulty', filterData.difficulty);
                if (filterData.maxCalories) params.set('maxCalories', filterData.maxCalories);
                
                window.location.href = '/recipes/recommendations?' + params.toString();
            })
            .catch(err => console.error('Error filtering recipes:', err));
        }

        function resetFilters() {
            filters.cuisine.value = '';
            filters.mealType.value = '';
            filters.difficulty.value = '';
            filters.calories.value = '';
            applyFilters();
        }

        // Refresh recommendations button
        document.getElementById('refreshRecs').addEventListener('click', function() {
            this.querySelector('i').classList.add('animate-spin');
            setTimeout(() => {
                this.querySelector('i').classList.remove('animate-spin');
                window.location.reload();
            }, 1000);
        });
    </script>
</body>
</html>