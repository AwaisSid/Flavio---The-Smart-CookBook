<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nutrition-Based Meal Planner</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --accent: #4895ef;
            --light: #f8f9fa;
            --dark: #212529;
            --success: #4cc9f0;
            --danger: #f72585;
            --warning: #f8961e;
            --info: #560bad;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
            padding: 20px;
            padding-top: 80px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            position: relative;
        }
        
        h1 {
            color: var(--primary);
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .subtitle {
            color: #666;
            font-size: 1.1rem;
            margin-bottom: 20px;
        }
        
        .filter-section {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .filter-card {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            border: 2px solid transparent;
            margin-bottom: 15px;
        }
        
        .filter-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
            border-color: var(--accent);
        }
        
        .filter-card.active {
            background: linear-gradient(135deg, var(--accent) 0%, var(--primary) 100%);
            color: white;
            border-color: var(--secondary);
        }
        
        .filter-card i {
            font-size: 2rem;
            margin-bottom: 10px;
            color: inherit;
        }
        
        .filter-card h3 {
            margin-bottom: 10px;
            font-weight: 600;
        }
        
        .range-slider {
            margin-top: 15px;
        }
        
        .range-slider label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        .range-inputs {
            display: flex;
            gap: 10px;
        }
        
        .range-inputs input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            text-align: center;
            width: 45%;
       
        margin: 5px 0;
        }
        
        .btn {
            display: inline-block;
            padding: 12px 25px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            text-decoration: none;
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.3);
        }
        
        .btn:hover {
            background: var(--secondary);
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(67, 97, 238, 0.4);
        }
        
        .btn-block {
            display: block;
            width: 100%;
        }
        
        .btn-ghost {
            background: transparent;
            color: var(--primary);
            border: 2px solid var(--primary);
        }
        
        .btn-ghost:hover {
            background: var(--primary);
            color: white;
        }
        
        .btn-success {
            background: var(--success);
            box-shadow: 0 4px 10px rgba(76, 201, 240, 0.3);
        }
        
        .btn-success:hover {
            background: #3aa8d8;
        }
        
        .btn-danger {
            background: var(--danger);
            box-shadow: 0 4px 10px rgba(247, 37, 133, 0.3);
        }
        
        .btn-danger:hover {
            background: #e5177b;
        }
        
        .recipe-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .recipe-card {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            position: relative;
        }
        
        .recipe-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }
        
        .recipe-img {
            width: 100%;
            height: 180px;
            object-fit: cover;
        }
        
        .recipe-content {
            padding: 20px;
        }
        
        .recipe-title {
            font-size: 1.2rem;
            margin-bottom: 10px;
            color: var(--dark);
        }
        
        .recipe-meta {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            font-size: 0.9rem;
            color: #666;
        }
        
        .recipe-stats {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .stat {
            text-align: center;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 5px;
        }
        
        .stat-value {
            font-weight: 600;
            color: var(--primary);
        }
        
        .stat-label {
            font-size: 0.7rem;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .recipe-actions {
            display: flex;
            gap: 10px;
        }
        
        .selected-recipes {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            margin-top: 30px;
        }
        
        .selected-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        .selected-table th, .selected-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        
        .selected-table th {
            background: var(--primary);
            color: white;
            font-weight: 500;
        }
        
        .selected-table tr:hover {
            background: #f8f9fa;
        }
        
        .selected-table img {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 5px;
        }
        
        .remove-btn {
            color: var(--danger);
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1.2rem;
        }
        
        .action-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-top: 20px;
        }
        
        .no-recipes {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .loading {
            text-align: center;
            padding: 30px;
            color: #666;
        }
        
        .loading i {
    font-size: 2rem;
    margin-bottom: 15px;
    display: block;
}

.error {
    text-align: center;
    padding: 30px;
    color: var(--danger);
    background: #fff0f0;
    border-radius: 8px;
}

.error i {
    font-size: 2rem;
    margin-bottom: 15px;
    display: block;
}

#results-section {
    display: none; /* Will be shown via JavaScript */
    background: white;
    padding: 25px;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    margin-top: 30px;
    animation: fadeIn 0.5s ease-out;
}
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .nutrient-highlight {
            font-weight: 700;
            color: var(--primary);
        }
        
        @media print {
            body * {
                visibility: hidden;
            }
            .print-content, .print-content * {
                visibility: visible;
            }
            .print-content {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
            }
            .no-print {
                display: none !important;
            }
        }
    </style>
</head>
<body>
    <%- include('partials/header', { user: user, currentPage: 'nutrition' }) %>
    <div class="container">
        <header>
            <h1><i class="fas fa-utensils"></i> Nutrition Meal Planner</h1>
            <p class="subtitle">Select recipes based on your nutritional needs</p>
        </header>
        
        <section class="filter-section">
            <h2>Filter by Nutrient</h2>
            <div class="filter-grid">
                <div class="filter-card" data-nutrient="protein" onclick="selectNutrient('protein')">
                    <i class="fas fa-dumbbell"></i>
                    <h3>Protein</h3>
                    <div class="range-slider">
                        <label for="protein-min">Range (g):</label>
                        <div class="range-inputs">
                            <input type="number" id="protein-min" placeholder="Min" value="20">
                            <input type="number" id="protein-max" placeholder="Max" value="100">
                        </div>
                    </div>
                </div>
                
                <div class="filter-card" data-nutrient="carbs" onclick="selectNutrient('carbs')">
                    <i class="fas fa-bread-slice"></i>
                    <h3>Carbs</h3>
                    <div class="range-slider">
                        <label for="carbs-min">Range (g):</label>
                        <div class="range-inputs">
                            <input type="number" id="carbs-min" placeholder="Min" value="20">
                            <input type="number" id="carbs-max" placeholder="Max" value="100">
                        </div>
                    </div>
                </div>
                
                <div class="filter-card" data-nutrient="fat" onclick="selectNutrient('fat')">
                    <i class="fas fa-bacon"></i>
                    <h3>Fat</h3>
                    <div class="range-slider">
                        <label for="fat-min">Range (g):</label>
                        <div class="range-inputs">
                            <input type="number" id="fat-min" placeholder="Min" value="10">
                            <input type="number" id="fat-max" placeholder="Max" value="50">
                        </div>
                    </div>
                </div>
                
                <div class="filter-card" data-nutrient="calories" onclick="selectNutrient('calories')">
                    <i class="fas fa-fire"></i>
                    <h3>Calories</h3>
                    <div class="range-slider">
                        <label for="calories-min">Range (kcal):</label>
                        <div class="range-inputs">
                            <input type="number" id="calories-min" placeholder="Min" value="300">
                            <input type="number" id="calories-max" placeholder="Max" value="800">
                        </div>
                    </div>
                </div>
            </div>
            
            <button id="search-btn" class="btn btn-block" style="margin-top: 25px;" type="button" onclick="searchRecipes()">
                <i class="fas fa-search"></i> Search Recipes
            </button>
        </section>
        
        <section id="results-section" style="display: none;">
            <h2>Recipes High in <span id="nutrient-display" class="nutrient-highlight">Protein</span></h2>
            <div id="recipe-results" class="recipe-grid">
                <!-- Recipes will be loaded here -->
            </div>
        </section>
        
        <section class="selected-recipes">
            <h2>Your Selected Recipes</h2>
            <div id="selected-recipes-container">
                <table class="selected-table">
                    <thead>
                        <tr>
                            <th>Recipe</th>
                            <th>Protein (g)</th>
                            <th>Carbs (g)</th>
                            <th>Fat (g)</th>
                            <th>Calories</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="selected-recipes-list">
                        <!-- Selected recipes will be loaded here -->
                    </tbody>
                </table>
                <div id="no-selected" class="no-recipes">
                    <p>No recipes selected yet. Search and add recipes above.</p>
                </div>
            </div>
            
            <div class="action-buttons no-print">
                <button id="clear-btn" class="btn btn-ghost" onclick="clearSelection()">
                    <i class="fas fa-trash"></i> Clear All
                </button>
                <button id="grocery-btn" class="btn btn-success" onclick="generateGroceryList()">
                    <i class="fas fa-shopping-basket"></i> Generate Grocery List
                </button>
            </div>
        </section>
    </div>
    <%- include('partials/footer') %>
    <script>
        let currentNutrient = 'protein';
        let selectedRecipes = [];
        
        // Initialize by loading selected recipes
        document.addEventListener('DOMContentLoaded', function() {
            loadSelectedRecipes();
        });
        
        function selectNutrient(nutrient) {
            currentNutrient = nutrient;
            document.getElementById('nutrient-display').textContent = nutrient.charAt(0).toUpperCase() + nutrient.slice(1);
            
            // Update active card
            document.querySelectorAll('.filter-card').forEach(card => {
                card.classList.remove('active');
                if (card.getAttribute('data-nutrient') === nutrient) {
                    card.classList.add('active');
                }
            });
        }
        
        function searchRecipes() {
    const minValue = document.getElementById(`${currentNutrient}-min`).value;
    const maxValue = document.getElementById(`${currentNutrient}-max`).value;
    const container = document.getElementById('recipe-results');
    
    // Show loading state
    document.getElementById('results-section').style.display = 'block';
    container.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i><p>Searching...</p></div>';
    
    // Simple fetch without CORS requirements
    fetch(`/nutrition/filter?nutrient=${currentNutrient}&minValue=${minValue}&maxValue=${maxValue}`)
        .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json();
        })
        .then(recipes => {
            if (!recipes || recipes.length === 0) {
                throw new Error('No recipes found. Try different values.');
            }
            displayRecipes(recipes);
        })
        .catch(error => {
            console.error('Error:', error);
            container.innerHTML = `
                <div class="error">
                    <p>${error.message}</p>
                    <button class="btn" onclick="searchRecipes()">
                        Try Again
                    </button>
                </div>
            `;
        });
}
        
function searchRecipes() {
    console.log('Search button clicked');
    
    const minValue = document.getElementById(`${currentNutrient}-min`).value || 0;
    const maxValue = document.getElementById(`${currentNutrient}-max`).value || 9999;
    const resultsSection = document.getElementById('results-section');
    const container = document.getElementById('recipe-results');
    
    // Show loading state
    resultsSection.style.display = 'block';
    container.innerHTML = `
        <div class="loading">
            <i class="fas fa-spinner fa-spin"></i>
            <p>Searching recipes...</p>
        </div>
    `;
    
    // Make the API call with credentials
    fetch(`/nutrition/filter?nutrient=${currentNutrient}&minValue=${minValue}&maxValue=${maxValue}`, {
        credentials: 'include' // Important for sessions
    })
        .then(async response => {
            console.log('Response status:', response.status);
            
            if (!response.ok) {
                const error = await response.json().catch(() => ({}));
                throw new Error(error.error || 'Request failed with status ' + response.status);
            }
            return response.json();
        })
        .then(recipes => {
            console.log('Received recipes:', recipes);
            
            if (!recipes || recipes.length === 0) {
                throw new Error('No recipes found matching your criteria');
            }
            
            displayRecipes(recipes);
        })
        .catch(error => {
            console.error('Error:', error);
            container.innerHTML = `
                <div class="error">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>${error.message}</p>
                    <button class="btn" onclick="searchRecipes()">
                        Try Again
                    </button>
                </div>
            `;
        });
}

function displayRecipes(recipes) {
    console.log('Displaying recipes:', recipes);
    const container = document.getElementById('recipe-results');
    container.innerHTML = '';
    
    recipes.forEach(recipe => {
        const card = document.createElement('div');
        card.className = 'recipe-card';
        
        // Handle image URL safely
        let imageUrl = '/images/placeholder.jpg';
        if (recipe.image_url) {
            imageUrl = recipe.image_url.startsWith('http') 
                ? recipe.image_url
                : recipe.image_url.startsWith('/')
                    ? recipe.image_url
                    : '/images/' + recipe.image_url;
        }
        
        card.innerHTML = `
            <img src="${imageUrl}" 
                 alt="${recipe.name || 'Recipe'}" 
                 class="recipe-img"
                 onerror="this.src='/images/placeholder.jpg'">
            <div class="recipe-content">
                <h3 class="recipe-title">${recipe.name || 'Unnamed Recipe'}</h3>
                <div class="recipe-meta">
                    <span><i class="far fa-clock"></i> ${recipe.time || 'N/A'}</span>
                    <span><i class="fas fa-tachometer-alt"></i> ${recipe.difficulty || 'N/A'}</span>
                </div>
                <div class="recipe-stats">
                    <div class="stat">
                        <div class="stat-value">${recipe.protein || 0}</div>
                        <div class="stat-label">Protein</div>
                    </div>
                    <div class="stat">
                        <div class="stat-value">${recipe.carbs || 0}</div>
                        <div class="stat-label">Carbs</div>
                    </div>
                    <div class="stat">
                        <div class="stat-value">${recipe.fat || 0}</div>
                        <div class="stat-label">Fat</div>
                    </div>
                    <div class="stat">
                        <div class="stat-value">${recipe.calories || 0}</div>
                        <div class="stat-label">Calories</div>
                    </div>
                </div>
                <div class="recipe-actions">
                    <button class="btn" onclick="addToSelection(${recipe.recipe_id})">
                        <i class="fas fa-plus"></i> Add
                    </button>
                </div>
            </div>
        `;
        container.appendChild(card);
    });
}
        
function addToSelection(recipeId) {
    // Check if recipe already exists in selection
    if (selectedRecipes.some(recipe => recipe.recipe_id === recipeId)) {
        alert('This recipe is already in your selection');
        return;
    }

    const recipeCard = document.querySelector(`.recipe-card [onclick="addToSelection(${recipeId})"]`)?.closest('.recipe-card');
    
    if (!recipeCard) {
        console.error('Recipe card not found for ID:', recipeId);
        return;
    }

    const recipeData = {
        recipe_id: recipeId,
        name: recipeCard.querySelector('.recipe-title')?.textContent || 'Unnamed Recipe',
        image_url: recipeCard.querySelector('.recipe-img')?.src || '/images/placeholder.jpg',
        protein: parseInt(recipeCard.querySelector('.stat:nth-child(1) .stat-value')?.textContent) || 0,
        carbs: parseInt(recipeCard.querySelector('.stat:nth-child(2) .stat-value')?.textContent) || 0,
        fat: parseInt(recipeCard.querySelector('.stat:nth-child(3) .stat-value')?.textContent) || 0,
        calories: parseInt(recipeCard.querySelector('.stat:nth-child(4) .stat-value')?.textContent) || 0
    };

    selectedRecipes.push(recipeData);
    saveSelection();
    alert('Recipe added successfully!');
}
        
        function removeFromSelection(recipeId) {
            selectedRecipes = selectedRecipes.filter(recipe => recipe.recipe_id !== recipeId);
            saveSelection();
        }
        
        function saveSelection() {
    console.log('Saving recipes:', selectedRecipes);
    
    // Transform the data to match what the server expects
    const recipesToSave = selectedRecipes.map(recipe => ({
        recipe_id: recipe.recipe_id || recipe.id,
        name: recipe.name || recipe.recipe_name,
        image_url: recipe.image_url || recipe.recipe_image,
        protein: recipe.protein,
        carbs: recipe.carbs,
        fat: recipe.fat,
        calories: recipe.calories
    }));

    fetch('/nutrition/save-selected', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
            recipes: recipesToSave
        })
    })
    .then(async response => {
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || 'Failed to save selection');
        }
        return data;
    })
    .then(data => {
        console.log('Save successful:', data);
        loadSelectedRecipes();
    })
    .catch(error => {
        console.error('Save error:', error);
        alert('Error saving recipes: ' + error.message);
    });
}
        
        function loadSelectedRecipes() {
            fetch('/nutrition/selected')
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(recipes => {
                    selectedRecipes = recipes;
                    updateSelectedRecipesDisplay();
                })
                .catch(error => {
                    console.error('Error loading selected recipes:', error);
                });
        }
        
        function updateSelectedRecipesDisplay() {
            const container = document.getElementById('selected-recipes-list');
            const noSelected = document.getElementById('no-selected');
            
            if (selectedRecipes.length === 0) {
                container.innerHTML = '';
                noSelected.style.display = 'block';
                return;
            }
            
            noSelected.style.display = 'none';
            container.innerHTML = '';
            
            selectedRecipes.forEach(recipe => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <img src="${recipe.recipe_image || '/images/placeholder.jpg'}" 
                                 alt="${recipe.recipe_name}" 
                                 style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px;"
                                 onerror="this.src='/images/placeholder.jpg'">
                            <span>${recipe.recipe_name}</span>
                        </div>
                    </td>
                    <td>${recipe.protein}</td>
                    <td>${recipe.carbs}</td>
                    <td>${recipe.fat}</td>
                    <td>${recipe.calories}</td>
                    <td>
                        <button class="remove-btn" onclick="removeFromSelection(${recipe.recipe_id})">
                            <i class="fas fa-times"></i>
                        </button>
                    </td>
                `;
                container.appendChild(row);
            });
        }
        
        function clearSelection() {
            if (confirm('Are you sure you want to clear all selected recipes?')) {
                selectedRecipes = [];
                saveSelection();
            }
        }
        
        function generateGroceryList() {
    if (selectedRecipes.length === 0) {
        alert('Please select at least one recipe first');
        return;
    }
    
    const recipeIds = selectedRecipes.map(recipe => recipe.recipe_id);
    console.log('Generating list for recipe IDs:', recipeIds);

    fetch('/grocery/generate', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({ recipeIds })
    })
    .then(async response => {
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            const text = await response.text();
            console.error('Non-JSON response:', text);
            throw new Error('Server returned unexpected format');
        }
        return response.json();
    })
    .then(data => {
        if (!data.success) {
            throw new Error(data.error || 'Failed to generate list');
        }
        window.location.href = '/grocery';
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error generating grocery list: ' + error.message);
    });
}
    </script>
</body>
</html>